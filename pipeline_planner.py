# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PipelinePlanner
                                 A QGIS plugin
 Allows the user to create a line and evaluate impacts
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-17
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Ivan Donisete Lonel
        email                : ivanlonel91@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

import qgis.core
import qgis.gui
from qgis.PyQt.QtCore import QCoreApplication, QSettings, Qt, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from . import resources  # noqa: F401

# Import the code for the dialog
from .pipeline_planner_dialog import PipelinePlannerDialog


class PipelinePlanner:
    """QGIS Plugin Implementation."""

    def __init__(self):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[:2]
        locale_path = os.path.join(self.plugin_dir, "i18n", f"PipelinePlanner_{locale}.qm")

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Pipeline Planner")

        self.layers = {
            "Raptor Buffer": {
                "species": None,
                "id_col": "Nest_ID",
                "status_col": "recentstat",
                "geom_func": lambda geom: geom.centroid(),
            },
            "BAEA Buffer": {
                "species": "Bald Eagle",
                "id_col": "nest_id",
                "status_col": "status",
                "geom_func": lambda geom: geom.centroid(),
            },
            "BUOWL Buffer": {
                "species": "Burrowing Owl",
                "id_col": "habitat_id",
                "status_col": "recentstat",
                "geom_func": lambda geom: geom.buffer(0.001, 5),
            },
        }

        self.canvas = iface.mapCanvas()
        self.addPipelinePoint = qgis.gui.QgsMapToolEmitPoint(self.canvas)
        self.rbPipeline = qgis.gui.QgsRubberBand(self.canvas)
        self.rbPipeline.setColor(Qt.red)
        self.rbPipeline.setWidth(4)

        self.dlg = PipelinePlannerDialog()
        self.dlg.tbl_impacts.setColumnWidth(1, 50)
        self.dlg.tbl_impacts.setColumnWidth(2, 250)
        self.dlg.tbl_impacts.setColumnWidth(3, 75)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("PipelinePlanner", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            iface.addToolBarIcon(action)

        if add_to_menu:
            iface.addPluginToVectorMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):  # noqa: N802
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/pipeline_planner/icon.png"
        self.add_action(icon_path, text=self.tr("Pipeline Planner"), callback=self.run, parent=iface.mainWindow())

        self.addPipelinePoint.canvasClicked.connect(self.evaluate_pipeline)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            iface.removePluginVectorMenu(self.tr("&Pipeline Planner"), action)
            iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        self.canvas.setMapTool(self.addPipelinePoint)

    def evaluate_pipeline(self, point, button):
        if button == Qt.LeftButton:
            self.rbPipeline.addPoint(point)
            self.rbPipeline.show()
        elif button == Qt.RightButton:
            pipeline = self.rbPipeline.asGeometry()
            self.rbPipeline.reset()

            # QMessageBox.information(None, "Pipeline", pipeline.asWkt())

            self.dlg.tbl_impacts.setRowCount(0)

            project_instance = qgis.core.QgsProject.instance()
            for layer_name, layer_dict in self.layers.items():
                try:
                    (layer,) = project_instance.mapLayersByName(layer_name)
                except ValueError:
                    QMessageBox.critical(
                        self.dlg,
                        "Problem with layer",
                        f"There must be one and only one layer called {layer_name}",
                    )
                    return

                for buffer in layer.getFeatures(pipeline.boundingBox()):
                    if buffer.geometry().intersects(pipeline):
                        row = self.dlg.tbl_impacts.rowCount()
                        self.dlg.tbl_impacts.insertRow(row)
                        self.dlg.tbl_impacts.setItem(
                            row, 0, QTableWidgetItem(layer_dict["species"] or buffer.attribute("recentspec"))
                        )
                        self.dlg.tbl_impacts.setItem(
                            row, 1, QTableWidgetItem(str(buffer.attribute(layer_dict["id_col"])))
                        )
                        self.dlg.tbl_impacts.setItem(
                            row, 2, QTableWidgetItem(buffer.attribute(layer_dict["status_col"]))
                        )
                        location = layer_dict["geom_func"](buffer.geometry())
                        self.dlg.tbl_impacts.setItem(row, 3, QTableWidgetItem(f"{pipeline.distance(location):.6f}"))

            self.dlg.tbl_impacts.sortItems(3)
            self.dlg.show()
